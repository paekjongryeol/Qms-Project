package com.qms.approve.controller;

import java.util.Calendar;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.qms.approve.service.ApproveService;
import com.qms.approve.vo.ApproveVO;
import com.qms.approve.vo.AprvPageVO;
import com.qms.approve.vo.AprvVO;
import com.qms.code.service.CodeService;
import com.qms.common.service.FileService;
import com.qms.table.vo.approve.AprvFileVO;
import com.qms.table.vo.approve.AprvInfoVO;
import com.qms.table.vo.approve.AprvLineVO;
import com.qms.table.vo.common.ComCodeVO;
import com.qms.table.vo.common.FileVO;
import com.qms.table.vo.user.UserInfoVO;
import com.qms.user.vo.UserVO;
import com.qms.util.Constant;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;


@Controller
public class ApproveController {

	@Autowired
	ApproveService service;
	
	@Autowired
	CodeService CdService;
	
	@Autowired
	FileService fileservice;
	/*
	 *  기안서 작성
     *  작성자 : 이성호
     *  작성일 : 24.05.20
	*/
	@RequestMapping("/approve/write")
	public String approveWrite() throws Exception{
		return "approve/aprv01";
	}
	// 기안서 조회 페이지
	@RequestMapping("/approve/search")
	public String approveSearch(HttpServletRequest request, Model model) throws Exception{
		
		HttpSession session  = request.getSession();
	    UserInfoVO uservo = (UserInfoVO) session.getAttribute("MallUser");
	    model.addAttribute("vo", uservo);
		
		return "approve/aprv02";
	}
	
	// 기안서 조회하기
	@RequestMapping("/approve/approveList")
	@ResponseBody
	public AprvPageVO selectApproveList(@ModelAttribute("AprvVO") AprvVO vo, HttpServletRequest request) throws Exception{
		
		HttpSession session  = request.getSession();
        UserInfoVO uservo = (UserInfoVO) session.getAttribute("MallUser");
        vo.setUserId(uservo.getUserId());
        
        int totalPage = 0;
		
		AprvPageVO aprvpagevo = new AprvPageVO();
		
		if(vo.getSearchType().equals("0")) {    // 결재진행중
			List<AprvVO> list = service.selectApprovingList(vo);
			totalPage = service.selectTotalAprvingCount(vo);
			aprvpagevo.setAprvList(list);
	    }else if(vo.getSearchType().equals("1")) {  // 결재완료
	    	List<AprvVO> list = service.selectApprovedList(vo);
	    	totalPage = service.selectTotalAprvedCount(vo);
	    	aprvpagevo.setAprvList(list);
	    }else {
	    	List<AprvVO> list = service.selectMyApproveList(vo);
	    	totalPage = service.selectTotalMyAprvCount(vo);
	    	aprvpagevo.setAprvList(list);
	    }
		aprvpagevo.setTotal(totalPage); // 총 데이터 수
		aprvpagevo.setStartPage(vo.getStartPage());
		aprvpagevo.setCurrentPage(vo.getCurrentPage()); // 현재 페이지
		
		return aprvpagevo;
	}
	// 기안서 상세조회
	@RequestMapping("/approve/approveDtl")
	public String aprvDtl(@ModelAttribute AprvInfoVO vo, Model model, HttpServletRequest request)throws Exception{
		HttpSession session  = request.getSession();
	    UserInfoVO uservo = (UserInfoVO) session.getAttribute("MallUser");
	    model.addAttribute("vo", uservo);
		
		model.addAttribute("aprvvo", vo);
		
		return "approve/APRVPOP02";
	}
	
	@RequestMapping("/approve/getApproveDtl")
	@ResponseBody
	public AprvVO getApproveDtl(@ModelAttribute("AprvVO")AprvVO vo)throws Exception{
		
		vo = service.selectApproveDtl(vo);
		
		// Aprv라인
		List<AprvLineVO> list1 = service.selectAprvLineList(vo);
		vo.setLinelist(list1);
		
		// Aprv파일
		List<AprvFileVO> list2 = service.selectAprvFileList(vo);
		vo.setFilelist(list2);
		
		return vo;
	}
	
	// 기안서 결재하기
	@RequestMapping("/approve/updateApprove")
	@ResponseBody
	public int updateApprove(@ModelAttribute("AprvVO")AprvVO vo, HttpServletRequest request, Model model)throws Exception{
		
		HttpSession session  = request.getSession();
	    UserInfoVO uservo = (UserInfoVO) session.getAttribute("MallUser");
	    model.addAttribute("vo", uservo);
		vo.setUserId(uservo.getUserId());
		
		model.addAttribute("aprvvo", vo);
	    
		if(vo.getAprvType().equals("0")) {
			// 결재중 -> 결재완료
			service.updateApproved(vo);
			
			// 대기 -> 결재중
			service.updateApproving(vo);
		}else {
			// 결재중 -> 반려
			service.updateAprvReject(vo);
		}
		
		// 문서상태 -> 결재완료
		service.updateDocApproved(vo);
		
		// 문서상태 -> 반려
		service.updateDocReject(vo);

		return 1;
	}
	
		//문서 정보 불러오기
		@RequestMapping("/approve/userDoc")
		@ResponseBody
		public ApproveVO userDoc(HttpServletRequest request) throws Exception{
			
			HttpSession session = request.getSession();
			UserVO uservo = (UserVO)session.getAttribute("MallUser");
			
			ComCodeVO cvo = new ComCodeVO();
			
			cvo.setComGrpCd(Constant.FILE_TYPE);
			List<ComCodeVO> list1 = CdService.selectComCodeList(cvo);
			
			cvo.setComGrpCd(Constant.FILE_YEAR);
			List<ComCodeVO> list2 = CdService.selectComCodeList(cvo);
			
			cvo.setComGrpCd(Constant.FILE_CLASS);
			List<ComCodeVO> list3 = CdService.selectComCodeList(cvo);
			
			cvo.setComGrpCd(Constant.FILE_STATUS);
			List<ComCodeVO> list4 = CdService.selectComCodeList(cvo);
			
			ApproveVO returnvo = new ApproveVO();
			returnvo.setUserName(uservo.getUserName());
			returnvo.setDeptName(uservo.getDeptName());
			returnvo.setTypelist(list1);
			returnvo.setYearlist(list2);
			returnvo.setClasslist(list3);
			returnvo.setStatuslist(list4);
		    
			return returnvo;
		}
		
		// 기안서 임시저장
		@RequestMapping("/approve/insertApproveDoc")
		@ResponseBody
		public int insertApprove(@ModelAttribute("AprvVO") AprvVO vo, HttpServletRequest request) throws Exception {
		    HttpSession session = request.getSession();
		    UserVO uservo = (UserVO) session.getAttribute("MallUser");
		    vo.setUserId(uservo.getUserId());

		    // 새로운 문서 번호 생성
		    String docNo = service.selectNewDocNo();
		    vo.setDocNo(docNo);
		    
		    // 문서 임시저장
		    int c = service.insertDocWirte(vo);

		    // 결재 라인 정보 설정
	        List<AprvLineVO> linelist = vo.getLinelist();
	        for (AprvLineVO aprvLineVO : linelist) {
	            aprvLineVO.setDocNo(docNo);
	            aprvLineVO.setAprvType("01"); // 결재유형 : 01 고정
	            aprvLineVO.setAprvStatus("01"); // 결재상태 : 상신 > 02, 임시저장 : 01
	            aprvLineVO.setRegUserId(uservo.getUserId());
	        // 결재 라인 삽입
	        service.insertAprvLine(aprvLineVO);
	        }
	        
	     // 결재 파일 정보 설정 및 파일 업로드
	        List<MultipartFile> atcfilelist = vo.getAtcfilelist();
	        if (atcfilelist != null) {
	            //for (MultipartFile file : atcfilelist) {
	        	for(int i=0;i<atcfilelist.size();i++) {
	        		if(atcfilelist.get(i)!=null && !atcfilelist.get(i).isEmpty()) {
	                    FileVO filevo = new FileVO();
	                    AprvFileVO aprvFileVO = new AprvFileVO();
	                    aprvFileVO.setDocNo(docNo);
	                    // MultipartFile 설정
	                    Calendar calendar = Calendar.getInstance();//객체를 불러옴
			            int year = calendar.get(Calendar.YEAR); // 현재 연도
			            int month = calendar.get(Calendar.MONTH) + 1; // 현재 월 (+1을 하는 이유는 월은 0부터 시작하기 때문)
			            String datePath = String.format("%04d%02d", year, month); // yyyymm 형식의 폴더 경로 생성

			            filevo.setMiddlePath("approve/" + datePath); // 미들 파일 경로 설정
			            filevo.setFile(atcfilelist.get(i));
	                    
	                    // 파일 업로드 및 정보 설정
	                    filevo = fileservice.createFile(filevo);

	                    aprvFileVO.setFilePath(filevo.getFilePath());
	                    aprvFileVO.setFileName(filevo.getOrgFileNm());
	                    aprvFileVO.setFileSize(filevo.getFileSize());
	                    aprvFileVO.setRegUserId(uservo.getUserId()); 
	                    
	                    // 결재 파일 삽입
	                    service.insertAprvFile(aprvFileVO);
	                }
	            }
	        }
	        
	        return c;
	    }
		//if() {
    		//aprvLineVO.setAprvStatus("01");		//결재상태 : 상신 > 02, 임시저장 : 01
		//}else if() {
			//aprvLineVO.setAprvStatus("01");		//결재상태 : 상신 > 02, 임시저장 : 01
		//}
	
}
